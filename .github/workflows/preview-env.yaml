name: Build and Deploy Non-Main Branches

on:
  push:
    branches:
      - '*'         # Trigger on all branches
      - '!main'     # Exclude main branch

env:
  REGISTRY: c8n.io
  IMAGE_NAME: aminehmida/preview-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git info
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to private registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      run: |
        # Get short commit SHA (7 characters)
        SHORT_SHA=$(git rev-parse --short=7 HEAD)
        
        # Get branch name and sanitize it for use in tags and subdomains
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
        
        # Set outputs
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "safe_branch_name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "image_tag=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "full_image=${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:$SHORT_SHA" >> $GITHUB_OUTPUT
        
        echo "Building image: ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:$SHORT_SHA"
        echo "Branch: $BRANCH_NAME"
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ steps.meta.outputs.full_image }}
          ${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.safe_branch_name }}-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          COMMIT_SHA=${{ steps.meta.outputs.short_sha }}
          BRANCH_NAME=${{ steps.meta.outputs.branch_name }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.33.3'
    
    - name: Install jsonnet
      run: |
        # Install go-jsonnet using .deb package
        VERSION="0.21.0"
        ARCH=$(dpkg --print-architecture)
        
        wget https://github.com/google/go-jsonnet/releases/download/v${VERSION}/jsonnet-go_${VERSION}_linux_${ARCH}.deb -P /tmp
        sudo dpkg -i /tmp/jsonnet-go_${VERSION}_linux_${ARCH}.deb
        
        # Verify installation
        jsonnet --version
    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure kubectl
      run: |
        # Create tmp directory for kubeconfig (matching your script's expectation)
        mkdir -p tmp
        
        # Configure kubectl to connect to your cluster
        # Option 1: Using kubeconfig from secrets
        echo "${{ secrets.KUBE_CONFIG }}" > tmp/kubeconfig
        
    
    - name: Deploy to Kubernetes
      run: |
        # Run deployment using Task with your specific variables
        task apply \
          APP_NAME="preview-env" \
          IMAGE="${{ steps.meta.outputs.full_image }}" \
          PORT="3000" \
          BASE_DOMAIN="previewenv.aminehmida.com" \
          ENV="${{ steps.meta.outputs.safe_branch_name }}" \
          REPLICAS="1"
    
    - name: Deployment status
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🏷️  Image tag: ${{ steps.meta.outputs.image_tag }}"
        echo "🌿 Branch: ${{ steps.meta.outputs.branch_name }}"
        echo "📦 Full image: ${{ steps.meta.outputs.full_image }}"